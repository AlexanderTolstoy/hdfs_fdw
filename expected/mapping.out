/*---------------------------------------------------------------------------------------------------------------------
 *
 * mapping.sql
 * 		Foreign-data wrapper for remote Hadoop servers
 *              To verify the CREATE SCHEMA, CREATE USER MAPPING and CREATE SERVER Functionality.
 *
 * Portions Copyright (c) 2012-2014, PostgreSQL Global Development Group
 *
 * Portions Copyright (c) 2004-2014, EnterpriseDB Corporation.
 *
 * IDENTIFICATION
 * 		mapping.sql
 *
 *---------------------------------------------------------------------------------------------------------------------
 */
-- Connection Settings.
\set HIVE_SERVER                '\'hive.server\''
\set HIVE_CLIENT_TYPE           '\'hiveserver2\''
\set HIVE_PORT                  '\'10000\''
CREATE DATABASE fdw_regression;
\c fdw_regression postgres
--create a non superuser
CREATE ROLE low_priv_user LOGIN;
--create a schema
CREATE SCHEMA test_ext_schema;
--- CREATE/ALTER/DROP EXTENSION ---
--Check the installed extensions in system and it should not list hdfs_fdw.
\dx+ hdfs_fdw
--switch to low privileged user
\c fdw_regression low_priv_user
--Try to create the hdfs_fdw extension with an unprivileged user. Should error out.
CREATE EXTENSION hdfs_fdw;
ERROR:  permission denied to create extension "hdfs_fdw"
HINT:  Must be superuser to create this extension.
--switch back to superuser
\c fdw_regression postgres
-- Create the extension hdfs_fdw using the minimal syntax and it should create successfully. 
CREATE EXTENSION hdfs_fdw;
--Check the installed extensions in system and it should list hdfs_fdw and its properties.
\dx hdfs_fdw
                        List of installed extensions
   Name   | Version | Schema |                 Description                  
----------+---------+--------+----------------------------------------------
 hdfs_fdw | 1.0     | public | foreign-data wrapper for remote hdfs servers
(1 row)

--ReCreate the extension (while it already exists) and it should error out.
CREATE EXTENSION hdfs_fdw;
ERROR:  extension "hdfs_fdw" already exists
-- Create extension with IF NOT EXISTS syntax. It should show a notice message indicating 
-- the pre-existence of extension.
CREATE EXTENSION IF NOT EXISTS hdfs_fdw;
NOTICE:  extension "hdfs_fdw" already exists, skipping
--switch to non superuser to ensure extension cannot be dropped
\c fdw_regression low_priv_user
DROP EXTENSION hdfs_fdw;
ERROR:  must be owner of extension hdfs_fdw
--switch back to postgres superuser
\c fdw_regression postgres
-- DROP EXTENSION with IF EXISTS clause
DROP EXTENSION IF EXISTS hdfs_fdw;
-- Attempt DROP EXTENSION with IF EXISTS clause when extension doesn't pre-exist
-- Ensure a NOTICE is raise
DROP EXTENSION IF EXISTS hdfs_fdw;
NOTICE:  extension "hdfs_fdw" does not exist, skipping
-- create extension WITH SCHEMA and IF NOT EXISTS and VERSION option to ensure extension 
-- objects are created in the schema
CREATE EXTENSION IF NOT EXISTS hdfs_fdw WITH SCHEMA test_ext_schema VERSION '1.0';
\dx hdfs_fdw
                            List of installed extensions
   Name   | Version |     Schema      |                 Description                  
----------+---------+-----------------+----------------------------------------------
 hdfs_fdw | 1.0     | test_ext_schema | foreign-data wrapper for remote hdfs servers
(1 row)

------------------------------------
----------ALTER EXTENSION ----------
-----------------------------------
-- UPDATE .. Since there is no update path available, it will display NOTICE
ALTER EXTENSION hdfs_fdw UPDATE;
NOTICE:  version "1.0" of extension "hdfs_fdw" is already installed
\dx hdfs_fdw
                            List of installed extensions
   Name   | Version |     Schema      |                 Description                  
----------+---------+-----------------+----------------------------------------------
 hdfs_fdw | 1.0     | test_ext_schema | foreign-data wrapper for remote hdfs servers
(1 row)

-- Change schema
ALTER EXTENSION hdfs_fdw SET SCHEMA public;
\dx hdfs_fdw
                        List of installed extensions
   Name   | Version | Schema |                 Description                  
----------+---------+--------+----------------------------------------------
 hdfs_fdw | 1.0     | public | foreign-data wrapper for remote hdfs servers
(1 row)

-- Create a view to add as member to extension
CREATE VIEW ext_v1 AS SELECT * FROM DUAL;
ALTER EXTENSION hdfs_fdw ADD VIEW ext_v1; 
--should list the view in the members list
\dx+ hdfs_fdw
     Objects in extension "hdfs_fdw"
           Object Description            
-----------------------------------------
 foreign-data wrapper hdfs_fdw
 function hdfs_fdw_handler()
 function hdfs_fdw_validator(text[],oid)
 view ext_v1
(4 rows)

--remove the view member
ALTER EXTENSION hdfs_fdw DROP VIEW ext_v1;
\dx+ hdfs_fdw
     Objects in extension "hdfs_fdw"
           Object Description            
-----------------------------------------
 foreign-data wrapper hdfs_fdw
 function hdfs_fdw_handler()
 function hdfs_fdw_validator(text[],oid)
(3 rows)

------------------------------------
----------CREATE SERVER ----------
-----------------------------------
--Create a server without providing optional parameters using the hdfs_fdw wrapper.
-- host defaults to localhost, port to 10000, client_type to hiverserver2 (RM 37660)
-- 
CREATE SERVER hdfs_srv1 FOREIGN DATA WRAPPER hdfs_fdw OPTIONS (client_type :HIVE_CLIENT_TYPE);
\des+ hdfs_srv1
                                                   List of foreign servers
   Name    |  Owner   | Foreign-data wrapper | Access privileges | Type | Version |         FDW Options         | Description 
-----------+----------+----------------------+-------------------+------+---------+-----------------------------+-------------
 hdfs_srv1 | postgres | hdfs_fdw             |                   |      |         | (client_type 'hiveserver2') | 
(1 row)

--test server
CREATE USER MAPPING FOR postgres SERVER hdfs_srv1;
\deu+
        List of user mappings
  Server   | User name | FDW Options 
-----------+-----------+-------------
 hdfs_srv1 | postgres  | 
(1 row)

CREATE FOREIGN TABLE dept (
deptno INTEGER,
dname VARCHAR2(14),
loc VARCHAR2(13)
)
SERVER hdfs_srv1 OPTIONS (dbname 'fdw_db', table_name 'dept');
--should work successfully indicating host defaulted to localhost, port to 10000
SELECT * FROM dept;
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

--test ALTER SERVER OWNER TO, and RENAME to clauses
ALTER SERVER hdfs_srv1 RENAME TO hdfs_srv1_renamed;
\des+ hdfs_srv1
                                       List of foreign servers
 Name | Owner | Foreign-data wrapper | Access privileges | Type | Version | FDW Options | Description 
------+-------+----------------------+-------------------+------+---------+-------------+-------------
(0 rows)

ALTER SERVER hdfs_srv1_renamed OWNER to low_priv_user;
\des+ hdfs_srv1_renamed
                                                          List of foreign servers
       Name        |     Owner     | Foreign-data wrapper | Access privileges | Type | Version |         FDW Options         | Description 
-------------------+---------------+----------------------+-------------------+------+---------+-----------------------------+-------------
 hdfs_srv1_renamed | low_priv_user | hdfs_fdw             |                   |      |         | (client_type 'hiveserver2') | 
(1 row)

DROP FOREIGN TABLE dept;
DROP USER MAPPING FOR postgres SERVER hdfs_srv1_renamed;
--end test server
--Create a server providing TYPE and VERSION clauses. 
--Also check host parameter can take IP address and host a numeric port
--Also the named parameters to have mixed cased names e.g. host, PORT, Client_Type
CREATE SERVER hdfs_srv2 TYPE 'abc' VERSION '1.0' 
FOREIGN DATA WRAPPER hdfs_fdw 
OPTIONS (host '127.0.0.1', PORT:HIVE_PORT,Client_Type :HIVE_CLIENT_TYPE);
--verify that the supplied clauses TYPE, VERSION and host,port,client_type are
-- as specified
\des+ hdfs_srv2
                                                                   List of foreign servers
   Name    |  Owner   | Foreign-data wrapper | Access privileges | Type | Version |                         FDW Options                         | Description 
-----------+----------+----------------------+-------------------+------+---------+-------------------------------------------------------------+-------------
 hdfs_srv2 | postgres | hdfs_fdw             |                   | abc  | 1.0     | (host '127.0.0.1', port '10000', client_type 'hiveserver2') | 
(1 row)

--test server
CREATE USER MAPPING FOR postgres SERVER hdfs_srv2;
CREATE FOREIGN TABLE dept (
deptno INTEGER,
dname VARCHAR2(14),
loc VARCHAR2(13)
)
SERVER hdfs_srv2 OPTIONS (dbname 'fdw_db', table_name 'dept');
SELECT * FROM dept;
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

DROP FOREIGN TABLE dept;
DROP USER MAPPING FOR postgres SERVER hdfs_srv2;
--end test server
--Create a server providing valid OPTIONS (HOST,PORT,CLIENT_TYPE,connect_timeout,query_timeout)
CREATE SERVER hdfs_srv3a FOREIGN DATA WRAPPER hdfs_fdw 
 OPTIONS (host :HIVE_SERVER, port :HIVE_PORT, client_type :HIVE_CLIENT_TYPE, connect_timeout '4000',query_timeout '4000');
\des+ hdfs_srv3a
                                                                                            List of foreign servers
    Name    |  Owner   | Foreign-data wrapper | Access privileges | Type | Version |                                                 FDW Options                                                 | Description 
------------+----------+----------------------+-------------------+------+---------+-------------------------------------------------------------------------------------------------------------+-------------
 hdfs_srv3a | postgres | hdfs_fdw             |                   |      |         | (host 'hive.server', port '10000', client_type 'hiveserver2', connect_timeout '4000', query_timeout '4000') | 
(1 row)

--test server
CREATE USER MAPPING FOR postgres SERVER hdfs_srv3a;
CREATE FOREIGN TABLE dept (
deptno INTEGER,
dname VARCHAR2(14),
loc VARCHAR2(13)
)
SERVER hdfs_srv3a OPTIONS (dbname 'fdw_db', table_name 'dept');
SELECT * FROM dept; 
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

--test port
--negative, raise error
ALTER SERVER hdfs_srv3a OPTIONS (SET port '-1');
\des+ hdfs_srv3a
                                                                                          List of foreign servers
    Name    |  Owner   | Foreign-data wrapper | Access privileges | Type | Version |                                               FDW Options                                                | Description 
------------+----------+----------------------+-------------------+------+---------+----------------------------------------------------------------------------------------------------------+-------------
 hdfs_srv3a | postgres | hdfs_fdw             |                   |      |         | (host 'hive.server', port '-1', client_type 'hiveserver2', connect_timeout '4000', query_timeout '4000') | 
(1 row)

SELECT * FROM dept;
ERROR:  invalid port number: -1
--zero, raise error
ALTER SERVER hdfs_srv3a OPTIONS (SET port '0');
SELECT * FROM dept;
ERROR:  invalid port number: 0
-- very large number, raise error
ALTER SERVER hdfs_srv3a OPTIONS (SET port '12345678');
SELECT * FROM dept;
ERROR:  invalid port number: 12345678
-- empty string, raise error (RM37655)
ALTER SERVER hdfs_srv3a OPTIONS (SET port '');
SELECT * FROM dept;
ERROR:  invalid port number: 
-- non numeric, raise error (RM37655)
ALTER SERVER hdfs_srv3a OPTIONS (SET port 'abc');
SELECT * FROM dept;
ERROR:  invalid port number: abc
-- drop port to see it goes back to default 10000, should succeed
ALTER SERVER hdfs_srv3a OPTIONS (DROP port );
SELECT * FROM dept;
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

--test host
--valid IP address, should succeed
ALTER SERVER hdfs_srv3a OPTIONS (SET host '127.0.0.1');
\des+ hdfs_srv3a
                                                                                    List of foreign servers
    Name    |  Owner   | Foreign-data wrapper | Access privileges | Type | Version |                                         FDW Options                                         | Description 
------------+----------+----------------------+-------------------+------+---------+---------------------------------------------------------------------------------------------+-------------
 hdfs_srv3a | postgres | hdfs_fdw             |                   |      |         | (host '127.0.0.1', client_type 'hiveserver2', connect_timeout '4000', query_timeout '4000') | 
(1 row)

SELECT * FROM dept;
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

--invalid IP address, should fail (RM37672)
ALTER SERVER hdfs_srv3a OPTIONS (SET host '127.0.0.2');
SELECT * FROM dept;
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

--invalid domain, should fail
ALTER SERVER hdfs_srv3a OPTIONS (SET host 'invalid.domain');
SELECT * FROM dept;
ERROR:  failed to initialize the HDFS connection object (Could not resolve host for client socket.)
--empty string, should fail
ALTER SERVER hdfs_srv3a OPTIONS (SET host '');
SELECT * FROM dept;
ERROR:  failed to initialize the HDFS connection object (Could not resolve host for client socket.)
--drop host to see it defaults to localhost
ALTER SERVER hdfs_srv3a OPTIONS (DROP host);
SELECT * FROM dept;
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

--test cient_type
--check case insensitivity, should pass (but fails RM 37640)
ALTER SERVER hdfs_srv3a OPTIONS (SET client_type 'HIVEserver2');
\des+ hdfs_srv3a
                                                                           List of foreign servers
    Name    |  Owner   | Foreign-data wrapper | Access privileges | Type | Version |                                FDW Options                                | Description 
------------+----------+----------------------+-------------------+------+---------+---------------------------------------------------------------------------+-------------
 hdfs_srv3a | postgres | hdfs_fdw             |                   |      |         | (client_type 'HIVEserver2', connect_timeout '4000', query_timeout '4000') | 
(1 row)

SELECT * FROM dept;
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

--set to hiveserver1, should error when querying 
--since the target is hiveserver2
ALTER SERVER hdfs_srv3a OPTIONS (SET client_type 'hiverserver1');
SELECT * FROM dept;
ERROR:  invalid option "hiverserver1"
HINT:  Valid client_type are hiveserver1 and hiveserver2
--set to invalid value, should error when querying 
ALTER SERVER hdfs_srv3a OPTIONS (SET client_type 'invalidserver');
SELECT * FROM dept;
ERROR:  invalid option "invalidserver"
HINT:  Valid client_type are hiveserver1 and hiveserver2
--set to invalid value, should error when querying 
ALTER SERVER hdfs_srv3a OPTIONS (SET client_type 'invalidserver');
SELECT * FROM dept;
ERROR:  invalid option "invalidserver"
HINT:  Valid client_type are hiveserver1 and hiveserver2
--drop client_type and then add back again, success
ALTER SERVER hdfs_srv3a OPTIONS (DROP client_type);
ALTER SERVER hdfs_srv3a OPTIONS (ADD client_type 'hiveserver2');
SELECT * FROM dept;
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

--test connect_timeout and query_timeout
-- set connect_timeout and query_timeout to 0, should disable timeout
--and bring results from foreign server (and not mean 0ms to fail every query)
ALTER SERVER hdfs_srv3a OPTIONS (SET connect_timeout '0', SET query_timeout '0');
\des+ hdfs_srv3a
                                                                        List of foreign servers
    Name    |  Owner   | Foreign-data wrapper | Access privileges | Type | Version |                             FDW Options                             | Description 
------------+----------+----------------------+-------------------+------+---------+---------------------------------------------------------------------+-------------
 hdfs_srv3a | postgres | hdfs_fdw             |                   |      |         | (connect_timeout '0', query_timeout '0', client_type 'hiveserver2') | 
(1 row)

SELECT * FROM dept;
ERROR:  invalid connect timeout "0"
HINT:  Valid range is 1 - 100000 ms
-- set to 10ms each and see they should timeout
ALTER SERVER hdfs_srv3a OPTIONS (SET connect_timeout '10', SET query_timeout '10');
SELECT * FROM dept;
 deptno |   dname    |   loc    
--------+------------+----------
     10 | ACCOUNTING | NEW YORK
     20 | RESEARCH   | DALLAS
     30 | SALES      | CHICAGO
     40 | OPERATIONS | BOSTON
(4 rows)

--success
ALTER SERVER hdfs_srv3a OPTIONS (SET connect_timeout '-1', SET query_timeout '-1');
SELECT * FROM dept;
ERROR:  invalid connect timeout "-1"
HINT:  Valid range is 1 - 100000 ms
--success
ALTER SERVER hdfs_srv3a OPTIONS (SET connect_timeout '2000', SET query_timeout '-1');
SELECT * FROM dept;
ERROR:  invalid query timeout "-1"
HINT:  Valid range is 1 - 100000 ms
ALTER SERVER hdfs_srv3a OPTIONS (SET connect_timeout '-1', SET query_timeout '4000');
SELECT * FROM dept;
ERROR:  invalid connect timeout "-1"
HINT:  Valid range is 1 - 100000 ms
--test DROP SERVER
--should fail, RESTRICT enforced
DROP SERVER hdfs_srv3a;
ERROR:  cannot drop server hdfs_srv3a because other objects depend on it
DETAIL:  user mapping for postgres on server hdfs_srv3a depends on server hdfs_srv3a
foreign table dept depends on server hdfs_srv3a
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
--should fail, RESTRICT enforced
DROP SERVER hdfs_srv3a RESTRICT;
ERROR:  cannot drop server hdfs_srv3a because other objects depend on it
DETAIL:  user mapping for postgres on server hdfs_srv3a depends on server hdfs_srv3a
foreign table dept depends on server hdfs_srv3a
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
--CASCADE, should pass and drop FOREIGN TABLE and USER MAPPING
DROP SERVER hdfs_srv3a CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to user mapping for postgres on server hdfs_srv3a
drop cascades to foreign table dept
\d dept
\deu+
      List of user mappings
 Server | User name | FDW Options 
--------+-----------+-------------
(0 rows)

--end test server
DROP SERVER IF EXISTS hdfs_srv1_renamed;
DROP SERVER hdfs_srv2;
-- DROP EXTENSION
DROP EXTENSION hdfs_fdw;
DROP SCHEMA test_ext_schema;
DROP ROLE low_priv_user;
DROP VIEW ext_v1;
\c postgres postgres
DROP DATABASE fdw_regression;
